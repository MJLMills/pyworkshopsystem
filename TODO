* Avoid making a multiplexer for every single multiplexed input.
    Currently the multiplexed input makes one in its constructor, but there is
    no need to do that since we just set the mux pin logic values then do a
    read. Every time you create the thing it instantiates 2 ADCS and 2 pins.
    The multiplexed inputs also need a way to pick the multiplexer pin to read
    from that isn't inefficient.

* analog inputs now share a superclass AnalogInput that requires them to
define an ADC object, so now they can utilize shared read methods and maybe
calibration setups.

* pull the calibration info out of the knobs into a superclass
    or, if feasible move it to a calibration class that
    can be subclassed for a variety of calibration accuracies.

* Build this into a package
    This repo needs to be installable into a development environment by
    interested users, so that Computer programs can be built using it (while
    simultaneously allowing for changes to this package, or not). This may be
    possible using the mip approach.

    Separately, a Computer program relying on the code in this package needs to
    be buildable into a .uf2 file for easy installation onto the Computer
    module. This seems to be done by rebuilding micropython with the added
    code, which produces the .uf2 binary.
    https://forum.micropython.org/viewtopic.php?f=3&t=10961&p=60262&hilit=uf2#p60296
    This link shows how to do it on ubuntu.
    https://forum.micropython.org/viewtopic.php?f=21&t=12559#p68049
    This link does a similar thing using Ubuntu in Docker on Windows.
    Check whether there are build instructions for micropython out there.

_Computer-Related Missing Features_

* understand how to read/write the EEPROM

* use the normalization probe to check which input jacks are plugged in or not
https://github.com/TomWhitwell/Workshop_Computer/blob/main/Demonstrations%2BHelloWorlds/PicoSDK/ComputerCard/ComputerCard.h#L188

* Understand how one might make use of the UART pins
